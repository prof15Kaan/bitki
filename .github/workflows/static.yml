<!DOCTYPE html>
<html lang="tr">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Bitki Sağlık Testi</title>
<style>
  body {
    font-family: Arial, sans-serif;
    background: #e8f5e9;
    margin: 0; padding: 20px;
    text-align: center;
  }
  h1 {
    color: #2e7d32;
  }
  #canvas {
    border: 3px solid #4caf50;
    max-width: 100%;
    height: auto;
    margin-top: 10px;
  }
  #status {
    margin-top: 15px;
    font-size: 1.2em;
    color: #33691e;
  }
  button {
    margin-top: 20px;
    background-color: #4caf50;
    color: white;
    border: none;
    padding: 12px 25px;
    font-size: 1em;
    border-radius: 6px;
    cursor: pointer;
  }
  button:disabled {
    background-color: #9e9e9e;
    cursor: not-allowed;
  }
</style>
</head>
<body>

<h1>Bitki Sağlık Testi</h1>
<video id="video" autoplay playsinline style="display:none;"></video>
<canvas id="canvas" width="320" height="240"></canvas>
<div id="status">Kamerayı başlatmak için butona tıklayın.</div>
<button id="startBtn">Başlat</button>

<script>
  const video = document.getElementById('video');
  const canvas = document.getElementById('canvas');
  const ctx = canvas.getContext('2d');
  const status = document.getElementById('status');
  const startBtn = document.getElementById('startBtn');

  let stream = null;
  let analyzing = false;

  function rgbToHsv(r, g, b) {
    r /= 255; g /= 255; b /= 255;
    let max = Math.max(r, g, b), min = Math.min(r, g, b);
    let h, s, v = max;
    let d = max - min;
    s = max === 0 ? 0 : d / max;
    if(max === min) h = 0;
    else {
      switch(max){
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
      h /= 6;
    }
    return [h, s, v];
  }

  function analyzeFrame() {
    if (!analyzing) return;
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
    let frame = ctx.getImageData(0, 0, canvas.width, canvas.height);
    let data = frame.data;

    let greenPixels = 0;
    let totalPixels = canvas.width * canvas.height;

    for(let i=0; i<data.length; i+=4){
      let r = data[i], g = data[i+1], b = data[i+2];
      let [h, s, v] = rgbToHsv(r, g, b);
      // Yeşil renk aralığı: H 0.25-0.45, S>0.4, V>0.2
      if(h > 0.25 && h < 0.45 && s > 0.4 && v > 0.2){
        greenPixels++;
      }
    }

    let greenRatio = greenPixels / totalPixels;
    let message = "";

    if(greenRatio > 0.15){
      message = "Bitki sağlıklı görünüyor! 🌿";
    } else if(greenRatio > 0.05){
      message = "Bitkide renk solması olabilir. Dikkat edin.";
    } else {
      message = "Bitki sağlığı kötü, problem olabilir! ⚠️";
    }

    status.textContent = `Yeşil oranı: ${(greenRatio*100).toFixed(2)}% — ${message}`;

    requestAnimationFrame(analyzeFrame);
  }

  startBtn.addEventListener('click', async () => {
    if(analyzing) return;

    try {
      stream = await navigator.mediaDevices.getUserMedia({video: true});
      video.srcObject = stream;
      await video.play();
      analyzing = true;
      startBtn.disabled = true;
      status.textContent = "Analiz başladı, kamerayı bitkiye yöneltin.";
      analyzeFrame();
    } catch (e) {
      status.textContent = "Kameraya erişim reddedildi veya desteklenmiyor.";
    }
  });
</script>

</body>
</html>
